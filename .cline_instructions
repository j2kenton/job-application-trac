# Cline Development Instructions

## Git Workflow - CRITICAL FOR PERSISTENCE
- **ALWAYS commit after each task completes** - This ensures work persists across IDE sessions
- **MANDATORY**: Use `git add .` and `git commit` after completing any task
- Use descriptive commit messages following conventional commit format
- Example: "feat: implement feature X", "fix: resolve issue Y", "docs: update README"
- Check `git status` to verify all changes are committed before using attempt_completion

## Task Completion Protocol (REQUIRED EVERY TASK)
1. Complete the requested feature/fix
2. Test functionality if applicable
3. Stage changes: `git add .` or `git add <specific files>`
4. Commit changes: `git commit -m "descriptive message"`
5. Verify clean working tree: `git status`
6. Use attempt_completion tool to present results

## Error Monitoring System
- Use `start-error-monitor.bat` to run automatic error detection
- Monitor `error-log.json` for error patterns
- System automatically attempts fixes for common issues
- Refer to `ERROR_MONITORING_README.md` for details

## Development Standards
- Follow existing code patterns and conventions
- Maintain TypeScript strict typing
- Use proper error handling
- Write clean, readable code
- Document complex functionality

## Project-Specific Notes
- This is a Job Application Tracker built with React, TypeScript, and Vite
- Uses shadcn/ui components and Tailwind CSS for styling
- Integrates with Gmail API and LinkedIn for data synchronization
- Features AI-powered email parsing and status detection
- LinkedIn sync status integration is complete and functional

## Persistence Guarantee
This file ensures that:
- All work is committed to git after each task
- Instructions persist across IDE sessions
- Development workflow remains consistent
- Work is never lost when closing/reopening the IDE
- Each session will continue the commit-after-task pattern

## Enhanced Automation Features
- **Auto-commit Script**: Use `auto-commit.bat` or `node scripts/auto-commit.js` for intelligent commits
- **All Systems Startup**: Use `start-all-systems.bat` to launch all development services at once
- **Error Monitoring**: Enhanced browser console error monitoring with real-time capture
- **Smart Commit Messages**: Auto-generated commit messages based on file changes

## Session Startup Checklist
1. Read this file to understand current project state
2. Check git status to see recent commits (use `auto-commit.bat status`)
3. **RECOMMENDED**: Run `start-all-systems.bat` to launch all services automatically
4. Review any active development servers and monitoring systems
5. Check `automation.log` for recent automated activities
6. Check for any pending tasks in recent commit messages

## Quick Start Commands
- **Start Everything**: `start-all-systems.bat`
- **Auto Commit**: `auto-commit.bat`
- **Check Status**: `auto-commit.bat status`
- **Monitor Errors**: Already running if started with `start-all-systems.bat`
